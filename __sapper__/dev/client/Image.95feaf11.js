import { S as SvelteComponentDev, i as init, s as safe_not_equal, e as element, c as claim_element, b as children, d as detach, g as attr, h as add_location, G as null_to_empty, j as insert, k as append, n as noop } from './index.0199b3b0.js';

/* src/components/projects/Image.svelte generated by Svelte v3.9.1 */

const file = "src/components/projects/Image.svelte";

function create_fragment(ctx) {
	var a, div, img;

	return {
		c: function create() {
			a = element("a");
			div = element("div");
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			a = claim_element(nodes, "A", { target: true, class: true, href: true }, false);
			var a_nodes = children(a);

			div = claim_element(a_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			img = claim_element(div_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			div_nodes.forEach(detach);
			a_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(img, "src", ctx.imgSrc);
			attr(img, "alt", ctx.alt);
			attr(img, "class", "svelte-tlhop4");
			add_location(img, file, 69, 6, 1349);
			attr(div, "class", "img-container svelte-tlhop4");
			add_location(div, file, 68, 4, 1315);
			attr(a, "target", "blank");
			attr(a, "class", "" + null_to_empty(ctx.width) + " svelte-tlhop4");
			attr(a, "href", ctx.url);
			add_location(a, file, 67, 0, 1263);
		},

		m: function mount(target, anchor) {
			insert(target, a, anchor);
			append(a, div);
			append(div, img);
		},

		p: function update(changed, ctx) {
			if (changed.imgSrc) {
				attr(img, "src", ctx.imgSrc);
			}

			if (changed.alt) {
				attr(img, "alt", ctx.alt);
			}

			if (changed.width) {
				attr(a, "class", "" + null_to_empty(ctx.width) + " svelte-tlhop4");
			}

			if (changed.url) {
				attr(a, "href", ctx.url);
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(a);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { imgSrc, alt, projectName, url, width } = $$props;

	const writable_props = ['imgSrc', 'alt', 'projectName', 'url', 'width'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Image> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('imgSrc' in $$props) $$invalidate('imgSrc', imgSrc = $$props.imgSrc);
		if ('alt' in $$props) $$invalidate('alt', alt = $$props.alt);
		if ('projectName' in $$props) $$invalidate('projectName', projectName = $$props.projectName);
		if ('url' in $$props) $$invalidate('url', url = $$props.url);
		if ('width' in $$props) $$invalidate('width', width = $$props.width);
	};

	return { imgSrc, alt, projectName, url, width };
}

class Image extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["imgSrc", "alt", "projectName", "url", "width"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.imgSrc === undefined && !('imgSrc' in props)) {
			console.warn("<Image> was created without expected prop 'imgSrc'");
		}
		if (ctx.alt === undefined && !('alt' in props)) {
			console.warn("<Image> was created without expected prop 'alt'");
		}
		if (ctx.projectName === undefined && !('projectName' in props)) {
			console.warn("<Image> was created without expected prop 'projectName'");
		}
		if (ctx.url === undefined && !('url' in props)) {
			console.warn("<Image> was created without expected prop 'url'");
		}
		if (ctx.width === undefined && !('width' in props)) {
			console.warn("<Image> was created without expected prop 'width'");
		}
	}

	get imgSrc() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imgSrc(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get projectName() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set projectName(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Image as I };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2UuOTVmZWFmMTEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3Byb2plY3RzL0ltYWdlLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuZXhwb3J0IGxldCBpbWdTcmMsIGFsdDtcbmV4cG9ydCBsZXQgcHJvamVjdE5hbWU7XG5leHBvcnQgbGV0IHVybDtcbmV4cG9ydCBsZXQgd2lkdGg7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAgIGEsIGRpdntcbiAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIGEge1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgIH1cblxuICAgIC5pbWctY29udGFpbmVye1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHdpZHRoOiA2NXZ3O1xuICAgICAgICBoZWlnaHQ6IDY1dnc7XG4gICAgICAgIG1heC1oZWlnaHQ6IDI1MHB4O1xuICAgICAgICBib3gtc2hhZG93OiAzcHggM3B4IDNweCBsaWdodGdyZXk7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAuM3MgZWFzZS1pbjtcbiAgICB9XG5cbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0MGVtKXtcbiAgICAgICAgLmltZy1jb250YWluZXJ7XG4gICAgICAgICAgICBtYXgtd2lkdGg6MTAwJTsgXG4gICAgICAgICAgICB3aWR0aDogMjV2dztcbiAgICAgICAgICAgIGhlaWdodDogMjV2dztcbiAgICAgICAgICAgIG1heC13aWR0aDogMzUwcHg7XG4gICAgICAgICAgICBtYXgtaGVpZ2h0OiAzNTBweDtcbiAgICAgICAgfSBcblxuICAgICAgICAubGFyZ2UgLmltZy1jb250YWluZXIge1xuICAgICAgICAgICAgd2lkdGg6IDMwdnc7XG4gICAgICAgICAgICBoZWlnaHQ6IDMwdnc7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDQ1MHB4O1xuICAgICAgICAgICAgbWF4LWhlaWdodDogNDUwcHg7XG4gICAgICAgIH1cblxuICAgICAgICAuZnVsbC13aWR0aCB7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLmZ1bGwtd2lkdGggLmltZy1jb250YWluZXIge1xuICAgICAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDQwdncpO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDM5cHg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhOmhvdmVyIC5pbWctY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTNweCk7XG4gICAgICAgIGJveC1zaGFkb3c6IDVweCA1cHggNXB4IGxpZ2h0Z3JleTtcbiAgICB9XG5cbiAgICBpbWcge1xuICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIC4zcyBlYXNlLWluO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cbiAgIFxuPC9zdHlsZT5cblxuPGEgdGFyZ2V0PVwiYmxhbmtcIiBjbGFzcz1cInt3aWR0aH1cIiBocmVmPVwie3VybH1cIj5cbiAgICA8ZGl2IGNsYXNzPVwiaW1nLWNvbnRhaW5lclwiPlxuICAgICAgPGltZyBzcmM9XCJ7aW1nU3JjfVwiIGFsdD1cInthbHR9XCI+XG4gICAgPC9kaXY+XG48L2E+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBcUVpQixNQUFNO3dCQUFTLEdBQUc7Ozs7OzsyQ0FGVCxLQUFLO3VCQUFVLEdBQUc7Ozs7Ozs7Ozs7Ozt5QkFFM0IsTUFBTTs7Ozt5QkFBUyxHQUFHOzs7OzRDQUZULEtBQUs7Ozs7d0JBQVUsR0FBRzs7Ozs7Ozs7Ozs7Ozs7OztDQWxFckMsTUFBSSxNQUFNLEVBQUUsR0FBRyxFQUNYLFdBQVcsRUFDWCxHQUFHLEVBQ0gsaUJBQUssQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==

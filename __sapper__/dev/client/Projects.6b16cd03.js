import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, c as claim_element, a as children, b as detach_dev, f as attr_dev, g as add_location, z as null_to_empty, h as insert_dev, j as append_dev, n as noop, T as TextAnimation, t as text, k as space, p as create_component, l as claim_text, m as claim_space, q as claim_component, r as mount_component, A as set_data_dev, u as transition_in, w as transition_out, x as destroy_component, H as HtmlTag, B as validate_each_argument, o as onMount, C as group_outros, D as check_outros, E as destroy_each } from './client.5409d567.js';

/* src/components/home-components/projects/Image.svelte generated by Svelte v3.29.4 */

const file = "src/components/home-components/projects/Image.svelte";

function create_fragment(ctx) {
	let a;
	let div;
	let img;
	let img_src_value;
	let a_class_value;

	const block = {
		c: function create() {
			a = element("a");
			div = element("div");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { rel: true, class: true, href: true });
			var a_nodes = children(a);
			div = claim_element(a_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { src: true, alt: true, class: true });
			div_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*imgSrc*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", /*alt*/ ctx[1]);
			attr_dev(img, "class", "svelte-xvkj5l");
			add_location(img, file, 107, 6, 2914);
			attr_dev(div, "class", "img-container svelte-xvkj5l");
			add_location(div, file, 106, 4, 2880);
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "class", a_class_value = "" + (null_to_empty(/*width*/ ctx[3]) + " svelte-xvkj5l"));
			attr_dev(a, "href", /*url*/ ctx[2]);
			add_location(a, file, 105, 0, 2830);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, div);
			append_dev(div, img);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*imgSrc*/ 1 && img.src !== (img_src_value = /*imgSrc*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*alt*/ 2) {
				attr_dev(img, "alt", /*alt*/ ctx[1]);
			}

			if (dirty & /*width*/ 8 && a_class_value !== (a_class_value = "" + (null_to_empty(/*width*/ ctx[3]) + " svelte-xvkj5l"))) {
				attr_dev(a, "class", a_class_value);
			}

			if (dirty & /*url*/ 4) {
				attr_dev(a, "href", /*url*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Image", slots, []);
	let { imgSrc } = $$props, { alt } = $$props;
	let { url } = $$props;
	let { width } = $$props;
	const writable_props = ["imgSrc", "alt", "url", "width"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Image> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("imgSrc" in $$props) $$invalidate(0, imgSrc = $$props.imgSrc);
		if ("alt" in $$props) $$invalidate(1, alt = $$props.alt);
		if ("url" in $$props) $$invalidate(2, url = $$props.url);
		if ("width" in $$props) $$invalidate(3, width = $$props.width);
	};

	$$self.$capture_state = () => ({ imgSrc, alt, url, width });

	$$self.$inject_state = $$props => {
		if ("imgSrc" in $$props) $$invalidate(0, imgSrc = $$props.imgSrc);
		if ("alt" in $$props) $$invalidate(1, alt = $$props.alt);
		if ("url" in $$props) $$invalidate(2, url = $$props.url);
		if ("width" in $$props) $$invalidate(3, width = $$props.width);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [imgSrc, alt, url, width];
}

class Image extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { imgSrc: 0, alt: 1, url: 2, width: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Image",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*imgSrc*/ ctx[0] === undefined && !("imgSrc" in props)) {
			console.warn("<Image> was created without expected prop 'imgSrc'");
		}

		if (/*alt*/ ctx[1] === undefined && !("alt" in props)) {
			console.warn("<Image> was created without expected prop 'alt'");
		}

		if (/*url*/ ctx[2] === undefined && !("url" in props)) {
			console.warn("<Image> was created without expected prop 'url'");
		}

		if (/*width*/ ctx[3] === undefined && !("width" in props)) {
			console.warn("<Image> was created without expected prop 'width'");
		}
	}

	get imgSrc() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imgSrc(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/home-components/projects/Text.svelte generated by Svelte v3.29.4 */
const file$1 = "src/components/home-components/projects/Text.svelte";

function create_fragment$1(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let p;
	let span;
	let t2;
	let t3;
	let html_tag;
	let t4;
	let a;
	let textanimation;
	let current;

	textanimation = new TextAnimation({
			props: { text: `Project Details` },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text(/*projectName*/ ctx[0]);
			t1 = space();
			p = element("p");
			span = element("span");
			t2 = text(/*projectYear*/ ctx[3]);
			t3 = space();
			t4 = space();
			a = element("a");
			create_component(textanimation.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*projectName*/ ctx[0]);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			span = claim_element(p_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, /*projectYear*/ ctx[3]);
			span_nodes.forEach(detach_dev);
			t3 = claim_space(p_nodes);
			p_nodes.forEach(detach_dev);
			t4 = claim_space(div_nodes);
			a = claim_element(div_nodes, "A", { rel: true, href: true, class: true });
			var a_nodes = children(a);
			claim_component(textanimation.$$.fragment, a_nodes);
			a_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "svelte-pe45v7");
			add_location(h2, file$1, 110, 4, 2879);
			attr_dev(span, "class", "year svelte-pe45v7");
			add_location(span, file$1, 112, 8, 2918);
			html_tag = new HtmlTag(null);
			attr_dev(p, "class", "svelte-pe45v7");
			add_location(p, file$1, 111, 4, 2906);
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", /*url*/ ctx[1]);
			attr_dev(a, "class", "svelte-pe45v7");
			add_location(a, file$1, 115, 4, 2999);
			attr_dev(div, "class", "svelte-pe45v7");
			add_location(div, file$1, 109, 0, 2869);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, p);
			append_dev(p, span);
			append_dev(span, t2);
			append_dev(p, t3);
			html_tag.m(/*projectText*/ ctx[2], p);
			append_dev(div, t4);
			append_dev(div, a);
			mount_component(textanimation, a, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*projectName*/ 1) set_data_dev(t0, /*projectName*/ ctx[0]);
			if (!current || dirty & /*projectYear*/ 8) set_data_dev(t2, /*projectYear*/ ctx[3]);
			if (!current || dirty & /*projectText*/ 4) html_tag.p(/*projectText*/ ctx[2]);

			if (!current || dirty & /*url*/ 2) {
				attr_dev(a, "href", /*url*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textanimation.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textanimation.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(textanimation);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Text", slots, []);

	let { projectName } = $$props,
		{ url } = $$props,
		{ projectText } = $$props,
		{ projectYear } = $$props;

	const writable_props = ["projectName", "url", "projectText", "projectYear"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Text> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("projectName" in $$props) $$invalidate(0, projectName = $$props.projectName);
		if ("url" in $$props) $$invalidate(1, url = $$props.url);
		if ("projectText" in $$props) $$invalidate(2, projectText = $$props.projectText);
		if ("projectYear" in $$props) $$invalidate(3, projectYear = $$props.projectYear);
	};

	$$self.$capture_state = () => ({
		TextAnimation,
		projectName,
		url,
		projectText,
		projectYear
	});

	$$self.$inject_state = $$props => {
		if ("projectName" in $$props) $$invalidate(0, projectName = $$props.projectName);
		if ("url" in $$props) $$invalidate(1, url = $$props.url);
		if ("projectText" in $$props) $$invalidate(2, projectText = $$props.projectText);
		if ("projectYear" in $$props) $$invalidate(3, projectYear = $$props.projectYear);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [projectName, url, projectText, projectYear];
}

class Text extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			projectName: 0,
			url: 1,
			projectText: 2,
			projectYear: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Text",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*projectName*/ ctx[0] === undefined && !("projectName" in props)) {
			console.warn("<Text> was created without expected prop 'projectName'");
		}

		if (/*url*/ ctx[1] === undefined && !("url" in props)) {
			console.warn("<Text> was created without expected prop 'url'");
		}

		if (/*projectText*/ ctx[2] === undefined && !("projectText" in props)) {
			console.warn("<Text> was created without expected prop 'projectText'");
		}

		if (/*projectYear*/ ctx[3] === undefined && !("projectYear" in props)) {
			console.warn("<Text> was created without expected prop 'projectYear'");
		}
	}

	get projectName() {
		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set projectName(value) {
		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get projectText() {
		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set projectText(value) {
		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get projectYear() {
		throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set projectYear(value) {
		throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/home-components/projects/Projects.svelte generated by Svelte v3.29.4 */
const file$2 = "src/components/home-components/projects/Projects.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	child_ctx[4] = i;
	return child_ctx;
}

// (132:4) {#if title}
function create_if_block(ctx) {
	let h2;
	let t;

	const block = {
		c: function create() {
			h2 = element("h2");
			t = text(/*title*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t = claim_text(h2_nodes, /*title*/ ctx[1]);
			h2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "svelte-34fnmw");
			add_location(h2, file$2, 132, 8, 3454);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(132:4) {#if title}",
		ctx
	});

	return block;
}

// (137:8) {#each portfolioCards as card, index}
function create_each_block(ctx) {
	let div2;
	let div0;
	let image;
	let t0;
	let div1;
	let text_1;
	let t1;
	let div2_index_value;
	let current;

	image = new Image({
			props: {
				imgSrc: /*card*/ ctx[2].imgSrc,
				url: /*card*/ ctx[2].url,
				alt: /*card*/ ctx[2].alt
			},
			$$inline: true
		});

	text_1 = new Text({
			props: {
				projectName: /*card*/ ctx[2].projectName,
				url: /*card*/ ctx[2].url,
				projectText: /*card*/ ctx[2].projectText,
				projectYear: /*card*/ ctx[2].projectYear
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			create_component(image.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(text_1.$$.fragment);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true, index: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(image.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(text_1.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "image-container svelte-34fnmw");
			add_location(div0, file$2, 138, 16, 3634);
			attr_dev(div1, "class", "text-container svelte-34fnmw");
			add_location(div1, file$2, 141, 16, 3784);
			attr_dev(div2, "class", "card-container svelte-34fnmw");
			attr_dev(div2, "index", div2_index_value = /*index*/ ctx[4]);
			add_location(div2, file$2, 137, 12, 3581);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			mount_component(image, div0, null);
			append_dev(div2, t0);
			append_dev(div2, div1);
			mount_component(text_1, div1, null);
			append_dev(div2, t1);
			current = true;
		},
		p: function update(ctx, dirty) {
			const image_changes = {};
			if (dirty & /*portfolioCards*/ 1) image_changes.imgSrc = /*card*/ ctx[2].imgSrc;
			if (dirty & /*portfolioCards*/ 1) image_changes.url = /*card*/ ctx[2].url;
			if (dirty & /*portfolioCards*/ 1) image_changes.alt = /*card*/ ctx[2].alt;
			image.$set(image_changes);
			const text_1_changes = {};
			if (dirty & /*portfolioCards*/ 1) text_1_changes.projectName = /*card*/ ctx[2].projectName;
			if (dirty & /*portfolioCards*/ 1) text_1_changes.url = /*card*/ ctx[2].url;
			if (dirty & /*portfolioCards*/ 1) text_1_changes.projectText = /*card*/ ctx[2].projectText;
			if (dirty & /*portfolioCards*/ 1) text_1_changes.projectYear = /*card*/ ctx[2].projectYear;
			text_1.$set(text_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(image.$$.fragment, local);
			transition_in(text_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(image.$$.fragment, local);
			transition_out(text_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(image);
			destroy_component(text_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(137:8) {#each portfolioCards as card, index}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let section;
	let t;
	let div;
	let current;
	let if_block = /*title*/ ctx[1] && create_if_block(ctx);
	let each_value = /*portfolioCards*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			section = element("section");
			if (if_block) if_block.c();
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if (if_block) if_block.l(section_nodes);
			t = claim_space(section_nodes);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "projects-container svelte-34fnmw");
			add_location(div, file$2, 135, 4, 3490);
			attr_dev(section, "class", "svelte-34fnmw");
			add_location(section, file$2, 130, 0, 3420);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			if (if_block) if_block.m(section, null);
			append_dev(section, t);
			append_dev(section, div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(section, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*portfolioCards*/ 1) {
				each_value = /*portfolioCards*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Projects", slots, []);
	let { portfolioCards } = $$props, { title } = $$props;
	const writable_props = ["portfolioCards", "title"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Projects> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("portfolioCards" in $$props) $$invalidate(0, portfolioCards = $$props.portfolioCards);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
	};

	$$self.$capture_state = () => ({
		onMount,
		Image,
		Text,
		portfolioCards,
		title
	});

	$$self.$inject_state = $$props => {
		if ("portfolioCards" in $$props) $$invalidate(0, portfolioCards = $$props.portfolioCards);
		if ("title" in $$props) $$invalidate(1, title = $$props.title);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [portfolioCards, title];
}

class Projects extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { portfolioCards: 0, title: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Projects",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*portfolioCards*/ ctx[0] === undefined && !("portfolioCards" in props)) {
			console.warn("<Projects> was created without expected prop 'portfolioCards'");
		}

		if (/*title*/ ctx[1] === undefined && !("title" in props)) {
			console.warn("<Projects> was created without expected prop 'title'");
		}
	}

	get portfolioCards() {
		throw new Error("<Projects>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set portfolioCards(value) {
		throw new Error("<Projects>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Projects>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Projects>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Projects as P };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

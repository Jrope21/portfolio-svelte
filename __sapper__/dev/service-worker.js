(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1578463050348;

	const files = [
		"service-worker-index.html",
		"favicon/android-chrome-192x192.png",
		"favicon/android-chrome-512x512.png",
		"favicon/apple-touch-icon.png",
		"favicon/favicon-16x16.png",
		"favicon/favicon-32x32.png",
		"favicon/favicon.ico",
		"favicon/site.webmanifest",
		"favicon.png",
		"global.css",
		"images/Jorden-Background-Gray.jpg",
		"images/creative-revolt/about-cta.png",
		"images/creative-revolt/about.png",
		"images/creative-revolt/home-ctas.png",
		"images/creative-revolt/home.png",
		"images/creative-revolt/writing-class.png",
		"images/halcyon/dining.png",
		"images/halcyon/events.png",
		"images/halcyon/home-cta.png",
		"images/halcyon/home.png",
		"images/halcyon/spotlight.png",
		"images/halcyon-5.jpg",
		"images/hero-doe.png",
		"images/resume-joshua-roper.pdf",
		"images/so-white.png",
		"images/university-park/form.png",
		"images/university-park/home-ctas.png",
		"images/university-park/home-video.png",
		"images/university-park/home.png",
		"images/university-park/library.png",
		"images/university-park/newsletter.png",
		"images/uptexas-thumb.jpg",
		"manifest.json"
	];

	const shell = [
		"client/index.86fc6f69.js",
		"client/client.d913d621.js",
		"client/index.60cd3d27.js",
		"client/TextAnimation.11321dbd.js",
		"client/PageTransition.edec49ed.js",
		"client/index.d05e32de.js",
		"client/experience.835fc555.js",
		"client/Skills.73137b0a.js",
		"client/creative-revolt.994a536c.js",
		"client/university-park.a3d633e1.js",
		"client/halcyon.8ab6d18e.js",
		"client/about.0b438e00.js",
		"client/index.a6d909aa.js",
		"client/[slug].91aaba39.js",
		"client/sapper-dev-client.66640646.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;

		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;

		// always serve static files and bundler-generated assets from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}

		// for pages, you might want to serve a shell `service-worker-index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

		if (event.request.cache === 'only-if-cached') return;

		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch(err) {
						const response = await cache.match(event.request);
						if (response) return response;

						throw err;
					}
				})
		);
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

!function(){"use strict";const e=["client/index.f4e27f23.js","client/TextAnimation.0bca3ee0.js","client/PageTransition.551ee528.js","client/index.c479666d.js","client/index.2b687001.js","client/Skills.c61907b2.js","client/experience.fbc2244f.js","client/creative-revolt.1d40e7ab.js","client/university-park.2990dde8.js","client/halcyon.fba0c2e7.js","client/about.8f5d27ea.js","client/client.f2bd5d08.js"].concat(["service-worker-index.html","favicon/android-chrome-192x192.png","favicon/android-chrome-512x512.png","favicon/apple-touch-icon.png","favicon/favicon-16x16.png","favicon/favicon-32x32.png","favicon/favicon.ico","favicon/site.webmanifest","favicon.png","global.css","images/Jorden-Background-Gray.jpg","images/creative-revolt/about-cta.png","images/creative-revolt/about.png","images/creative-revolt/home-ctas.png","images/creative-revolt/home.png","images/creative-revolt/writing-class.png","images/halcyon/dining.png","images/halcyon/events.png","images/halcyon/home-cta.png","images/halcyon/home.png","images/halcyon/spotlight.png","images/halcyon-5.jpg","images/hero-doe.png","images/resume-joshua-roper.pdf","images/so-white.png","images/university-park/form.png","images/university-park/home-ctas.png","images/university-park/home-video.png","images/university-park/home.png","images/university-park/library.png","images/university-park/newsletter.png","images/uptexas-thumb.jpg","manifest.json"]),n=new Set(e);self.addEventListener("install",n=>{n.waitUntil(caches.open("cache1578468933155").then(n=>n.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const n of e)"cache1578468933155"!==n&&await caches.delete(n);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const t=new URL(e.request.url);t.protocol.startsWith("http")&&(t.hostname===self.location.hostname&&t.port!==self.location.port||(t.host===self.location.host&&n.has(t.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1578468933155").then(async n=>{try{const t=await fetch(e.request);return n.put(e.request,t.clone()),t}catch(t){const a=await n.match(e.request);if(a)return a;throw t}}))))})}();
